--- origsrc/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_ffmpeg.c	2008-01-14 13:32:12.000000000 -0600
+++ src/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_ffmpeg.c	2008-05-25 01:38:36.187500000 -0500
@@ -1721,7 +1721,6 @@
 		      );
 	      }
 #endif	      
-              rfps = ic->streams[ii]->r_frame_rate;
               acc->workaround_bugs = FF_BUG_AUTODETECT;
               acc->error_resilience = 2;
               acc->error_concealment = 3;
@@ -1734,6 +1733,8 @@
               {
                   acc->flags|= CODEC_FLAG_TRUNCATED;
               }
+#if LIBAVCODEC_BUILD < 4754
+              rfps = ic->streams[ii]->r_frame_rate;
               if (acc->frame_rate != rfps)
               {
                   printf("\nSeems that stream %d comes from film source: %2.2f->%2.2f\n",
@@ -1743,6 +1744,7 @@
 
               /* update the current frame rate to match the stream frame rate */
               gvahand->framerate = (gdouble)rfps / (gdouble)acc->frame_rate_base;
+#endif
             }
             break;
         default:
--- origsrc/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_mpeg3.c	2008-01-14 13:32:12.000000000 -0600
+++ src/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_mpeg3.c	2008-05-25 01:38:36.187500000 -0500
@@ -80,6 +80,9 @@
      mpeg3_t *tmp_handle;
      gint     l_rc;
      char    *l_filename;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+     int      errcode = 0;
+#endif
 
      /* here we are in the forked child process
       * where we install our own signal handlers
@@ -92,7 +95,11 @@
      signal(SIGFPE,  p_mpeg3_sig_handler);
 
      if(gap_debug) printf("GVA_MP3: CILD process before mpeg3_open\n");
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+     tmp_handle = mpeg3_open(l_filename, &errcode);
+#else
      tmp_handle = mpeg3_open(l_filename);
+#endif
      if(gap_debug) printf("GVA_MP3: CILD process after mpeg3_open\n");
      if(tmp_handle)
      {
@@ -250,6 +257,9 @@
   gint          repeat_count;
   char         *filename;
   char         *tocfile;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+  int           errcode = 0;
+#endif
 
   if(gap_debug) printf("p_wrapper_mpeg3_open_read: START in_filename: %s\n", in_filename);
 
@@ -295,7 +305,11 @@
    */
   for(repeat_count = 0; repeat_count < 3; repeat_count++)
   {
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+    handle->main_handle = mpeg3_open(filename, &errcode);
+#else
     handle->main_handle = mpeg3_open(filename);
+#endif
 
 //printf("GVA: oooooo OPEN handle->main_handle:%d\n", (int)handle->main_handle);
 
@@ -304,10 +318,12 @@
       gvahand->decoder_handle = (void *)handle;
       gvahand->frame_bpp = 3;
 
+#if MPEG3_MAJOR <2 && MPEG3_MINOR < 7
       /* never use MMX, it sometimes delivers trashed frames
        * and has no advantages on modern CPU's at all
        */
       mpeg3_set_mmx(handle->main_handle, FALSE);
+#endif
 
       if(mpeg3_has_video(handle->main_handle))
       {
@@ -918,6 +934,9 @@
   long     l_size;
   unsigned long code;
   unsigned char *buffer;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+  int      errcode = 0;
+#endif
 
   if(frame_nr < 1)
   {
@@ -946,7 +965,11 @@
 
   if(handle->raw_handle == NULL)
   { 
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+     handle->raw_handle = mpeg3_open_copy(gvahand->filename, handle->main_handle, &errcode);
+#else
      handle->raw_handle = mpeg3_open_copy(gvahand->filename, handle->main_handle);
+#endif
      if(handle->raw_handle == NULL)
      {
        return(GVA_RET_ERROR);
@@ -1108,6 +1131,9 @@
   char *dummy_y;
   char *dummy_u;
   char *dummy_v;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+  int   errcode = 0;
+#endif
 
   l_rc = 0;
   l_dirty_reads = 0;
@@ -1123,7 +1149,11 @@
     /* printf(" ++ 1 ++ p_mpeg3_emulate_seek before mpeg3_open_copy  %s\n", gvahand->filename); */
 
     /* bakward seek: reopen needed */
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+    seek_handle = mpeg3_open_copy(gvahand->filename, handle, &errcode);
+#else
     seek_handle = mpeg3_open_copy(gvahand->filename, handle);
+#endif
     /* printf(" ++ 2 ++ p_mpeg3_emulate_seek after mpeg3_open_copy  %s\n", gvahand->filename); */
 
     decoder_handle = (t_GVA_mpeg3*)gvahand->decoder_handle;
@@ -1288,6 +1318,9 @@
   gdouble l_progress_step;
   mpeg3_t*  seek_handle;
   t_GVA_mpeg3*  decoder_handle;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+  int     errcode = 0;
+#endif
 
   l_rc = 0;
   l_gopseek = MAX((seekto_frame - GVA_GOPSEEKSIZE), 1);
@@ -1304,7 +1337,11 @@
   gvahand->percentage_done = 0.0001;
   if(l_gopseek == 1)
   {
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+    seek_handle = mpeg3_open_copy(gvahand->filename, handle, &errcode);
+#else
     seek_handle = mpeg3_open_copy(gvahand->filename, handle);
+#endif
     if(seek_handle)
     {
       decoder_handle = (t_GVA_mpeg3*)gvahand->decoder_handle;
--- origsrc/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_mpeg3toc.c	2008-01-14 13:32:12.000000000 -0600
+++ src/gimp-gap-2.4.0/libgapvidapi/gap_vid_api_mpeg3toc.c	2008-05-25 01:38:36.203125000 -0500
@@ -261,9 +261,16 @@
     int total_samples = 0;
     int total_frames = 0;
     int rewind = 1;
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+	int errcode = 0;
+#endif
     
 //printf(__FUNCTION__ " 1\n");
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+    input = mpeg3_open(src, &errcode);
+#else
     input = mpeg3_open(src);
+#endif
 
 //printf(__FUNCTION__ " 2\n");
     vtracks = mpeg3_total_vstreams(input);
@@ -619,8 +626,13 @@
       PUT_INT32(input->demuxer->titles[i]->cell_table_size);
       for(j = 0; j < input->demuxer->titles[i]->cell_table_size; j++)
       {
+#if MPEG3_MAJOR >= 1 && MPEG3_MINOR >= 7
+        PUT_INT64(input->demuxer->titles[i]->cell_table[j].title_start);
+        PUT_INT64(input->demuxer->titles[i]->cell_table[j].title_end);
+#else
         PUT_INT64(input->demuxer->titles[i]->cell_table[j].start_byte);
         PUT_INT64(input->demuxer->titles[i]->cell_table[j].end_byte);
+#endif
         PUT_INT32(input->demuxer->titles[i]->cell_table[j].program);
       }
     }
--- origsrc/gimp-gap-2.4.0/vid_enc_ffmpeg/gap_enc_ffmpeg_main.c	2008-01-14 13:32:12.000000000 -0600
+++ src/gimp-gap-2.4.0/vid_enc_ffmpeg/gap_enc_ffmpeg_main.c	2008-05-25 01:38:36.218750000 -0500
@@ -1400,7 +1400,9 @@
   ffh->frame_leftBand               = 0;
   ffh->frame_rightBand              = 0;
   ffh->frame_duration_pts           = (1.0 / gpp->val.framerate) * AV_TIME_BASE;
+#if LIBAVCODEC_BUILD < 4754
   ffh->frame_rate                   = gpp->val.framerate * DEFAULT_FRAME_RATE_BASE;
+#endif
   ffh->video_bit_rate               = epp->video_bitrate * 1000;
   ffh->video_bit_rate_tolerance     = epp->bitrate_tol * 1000;
   ffh->video_qscale                 = epp->qscale;
@@ -1537,8 +1539,10 @@
 
   video_enc->bit_rate = epp->video_bitrate * 1000;
   video_enc->bit_rate_tolerance = epp->bitrate_tol * 1000;
+#if LIBAVCODEC_BUILD < 4754
   video_enc->frame_rate_base = DEFAULT_FRAME_RATE_BASE;
   video_enc->frame_rate = gpp->val.framerate * DEFAULT_FRAME_RATE_BASE;
+#endif
   video_enc->width = gpp->val.vid_width;
   video_enc->height = gpp->val.vid_height;
 
@@ -2235,12 +2239,16 @@
    */
   ffh->ap->sample_rate = awp->awk[0].sample_rate;
   ffh->ap->channels = awp->awk[0].channels;
+#if LIBAVCODEC_BUILD < 4754
   ffh->ap->frame_rate_base = DEFAULT_FRAME_RATE_BASE;
   ffh->ap->frame_rate = gpp->val.framerate * DEFAULT_FRAME_RATE_BASE;
+#endif
   ffh->ap->width = gpp->val.vid_width;
   ffh->ap->height = gpp->val.vid_height;
 
+#if 0
   ffh->ap->image_format = NULL;
+#endif
   ffh->ap->pix_fmt = PIX_FMT_YUV420P;
 
   /* tv standard, NTSC, PAL, SECAM */
